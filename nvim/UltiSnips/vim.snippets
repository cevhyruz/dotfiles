
# Plugin header
snippet header
" File: ${1:`!v expand('%:t')`}
" Author: ${2:`!v g:snips_author`}
" Description: ${3}
${4:" Last Modified: `!v strftime("%B %d, %Y")`}

$0
endsnippet

# Plugin guard
snippet guard
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
	finish
endif
let $1 = 1${3}
endsnippet

# Global variable manipulation
snippet gvar "Global / configuration variable"
if !exists("g:${1:MyUltraImportantVar}")
	let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet # "Block comment / Title" b
" ------------------------------------------------------------------
" ${1:Comment Title}
" ------------------------------------------------------------------
endsnippet

# ------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------
snippet fun "Global function"
function! ${1:function_name}(${2})
	${3:" code}
endfunction
endsnippet

snippet s:fun "Script-local function"
function! ${1:function_name}(${2})
	${3:" code}
endfunction
endsnippet

snippet func "Function reference"
function('${1}')
endsnippet

# ------------------------------------------------------------------
# Comparison Operators
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# Loops
# ------------------------------------------------------------------
snippet for "For Loop"
for ${1:needle} in ${2:haystack}
	${3:" code}
endfor
endsnippet

snippet wh "White Loop"
while ${1:condition}
	${2:" code}
endwhile
endsnippet

# ------------------------------------------------------------------
# Conditionals
# ------------------------------------------------------------------
snippet if "If statement -> multi-line"
if ${1:condition}
	${2:" code}
endif
endsnippet

snippet ifo "If statement -> oneliner"
if ${1:condition} | ${2:" code} | endif
endsnippet

snippet ife "If-Else statement"
if ${1:condition}
	${2}
else
	${3}
endif
endsnippet

snippet ? "Ternary Operator"
${1:condition} ? ${2:true} : ${3:false}
endsnippet

# ------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------

snippet let "Global variable declartion"
let ${1:l}:${2:var_name} = ${3:value}
$0
endsnippet
