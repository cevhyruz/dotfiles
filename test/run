#!/usr/bin/env bash
# shellcheck shell=bash disable=SC2294,SC2206
# vi:ft=sh fdm=marker ts=2 sw=2 et

# Test runner for dotfiles.
#
# Usage:
#   ./test/run [test_file]
#
# Description:
#   Run all test files located in 'test' directory
#   if no [test_file] is supplied.

test_directory="$(cd "$(dirname "$0")" && pwd)"
bats_executable="${test_directory}/../test_lib/bats-core/bin/bats"

# Locate ourselves for easy reference.
export TEST_DIRECTORY="$test_directory"
export TEST_DEPS_DIR="${test_directory}/../test_lib"

# Make sure BATS is available:
git submodule init && git submodule update

# Which tests do we run?
if [[ $# -eq 0 ]]; then
	test_dirs=("${test_directory}"/Bash)
else
	test_dirs=("$@")
fi

# Make sure that the `parallel` command is installed,
# AND that it is the GNU version of `parallel`.
# If that is the case, try to guess the number of CPU cores,
# so we can run `bats` in parallel processing mode, which is a lot faster.
if command -v parallel &> /dev/null \
	&& parallel -V &> /dev/null \
	&& { parallel -V 2> /dev/null | grep -q '^GNU\>'; }; then
	# Expect to run at least on a dual-core CPU; slightly degraded performance
	# shouldn't matter otherwise.
	declare -i -r test_jobs_default=2
	# shellcheck disable=SC2155
	declare -i -r test_jobs_effective="$(
		if [[ "${TEST_JOBS:-detect}" = "detect" ]] \
			&& command -v nproc &> /dev/null; then
			nproc
		elif [[ -n "${TEST_JOBS}" ]] \
			&& [[ "${TEST_JOBS}" != "detect" ]]; then
			echo "${TEST_JOBS}"
		else
			echo "${test_jobs_default}"
		fi
	)"
	exec "$bats_executable" "${CI:+--tap}" --jobs "${test_jobs_effective}" \
		--no-parallelize-within-files "${test_dirs[@]}"
else
	# Run `bats` in single-threaded mode.
	exec "$bats_executable" "${CI:+--tap}" "${test_dirs[@]}"
fi
