#!/usr/bin/env bash

# Test runner for dotfiles.
#
# Usage:
#   ./test/run [test_file]
#
# Description:
#   Run all test files located in 'test' directory
#   if no [test_file] is supplied.
#
#   Test files is any of *.bats and/or *.vader files.

set -o privileged
set -o nounset
set -o errexit

function run() {
  _init_tests_lib
  if ! _set_test_suite "$@"; then
    declare -ag BATS_SPEC=()
    declare -ag VADER_SPEC=()

    for spec in "$@"; do
      case "${spec: -5}" in
      '.bats') BATS_SPEC+=("${spec}") ;;
      'vader') VADER_SPEC+=("${spec}") ;;
      esac
    done

    if [[ "${#BATS_SPEC[@]}" -gt 0 ]]; then
      _run_bats "${BATS_SPEC[@]}"
    fi

    if [[ "${#VADER_SPEC[@]}" -gt 0 ]]; then
      _run_vader "${VADER_SPEC[@]}"
    fi
  else
    _run_bats && _run_vader
  fi
}

function _run_bats() {
  eval "${BATS_EXECUTABLE}" ${CI:+--tap} --recursive "${TEST_DIRS[@]:-$@}"
}

function _run_vader() {
  echo "_run_vader is not yet configured!"
}

function _set_test_suite() {
  if [[ $# -eq 0 ]]; then
    # shellcheck disable=SC2206
    TEST_DIRS=(${TEST_DIRECTORY}/{install,Bash})
    return 0
  fi
  return 1
}

function _init_tests_lib() {
  TEST_DIRECTORY="$(cd "$(dirname "$0")" && pwd)" &&
    export TEST_DIRECTORY

  TEST_DEPS_DIR="${TEST_DIRECTORY}/../test_lib" &&
    export TEST_DEPS_DIR

  BATS_EXECUTABLE="${TEST_DIRECTORY}/../test_lib/bats-core/bin/bats"

  git submodule init &&
    git submodule update

  _set_dotfiles_dirs_path
}

function _set_dotfiles_dirs_path() {
  if [[ -z "${DOTFILES_BASH_DIR:-}" ]]; then
    DOTFILES_BASH_DIR=$(cd "${TEST_DIRECTORY}" && dirname "$(pwd)") &&
      export DOTFILES_BASH_DIR
  fi
}

run "$@"
