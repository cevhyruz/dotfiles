#!/usr/bin/env bash
# shellcheck shell=bash
# vi:ft=sh fdm=marker ts=2 sw=2 et

# main entry function.
function _core::() {
  if [[ "${PROMPT_COMMANDS_ENABLED:-1}" -eq 1 ]]; then
    FIRST_PROMPT=1 # prevent post_command from firing before the prompt.
    trap pre_command DEBUG # setup pre_command.
    PROMPT_COMMAND+=("post_command") # setup post_command.
  fi

  # lock and load theme file
  _::source_file  "${DOT_BASH}/themes/${BASH_THEME:-default}.theme.bash"

}

function _exit_code() {
  local -a exit_prompt=(
    "\e[0m" # reset
    "$1"
    "$2"
    "${EXIT_CODE:-}"
    "\e[0m" # reset
  )

  if [[ "${EXIT_CODE:-}" -ne 0 ]]; then
    printf "%b" "${exit_prompt[@]}"
  fi
}

function _core::_parse_SCM() {
  # TODO: make status get it's colors depending on gitconfig
  local status branch_name git_prompt

  # check if we are inside a Git repository
  if ! git rev-parse &> /dev/null; then
    return
  fi

  # Check that we are not inside '.git' directory.
  if [[ "$( git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]]; then

    # make sure git index is updated
    git update-index --really-refresh -q &> /dev/null

    if ! git diff --quiet --ignore-submodules --cached; then
      status+="${_gs_staged:-A}"
    fi

    if ! git diff-files --quiet --ignore-submodules --; then
      status+="${_gs_modified:-M}"
    fi

    if [[ -n "$( git ls-files --others --exclude-standard )" ]]; then
      status+="${_gs_untracked:-U}"
    fi

    if git rev-parse --verify refs/stash &> /dev/null; then
      status+="${_gs_stash:--}"
    fi
  fi

  branch_name+="$(git symbolic-ref --quiet --short HEAD 2> /dev/null \
    || git rev-parse --short HEAD 2> /dev/null \
    || echo "unknown")"

  git_prompt=(
    "\e[0m"          # reset
    "$1"             # open delimeter
    "${branch_name}" # current branch
    "\e[0m"          # reset all
    "$2"             # close delimeter
    "${status:-}"    # status symbol
    "\e[0m"          # reset all
  );

  printf "%b" "${git_prompt[@]}"
}

_core:: && unset -f _core::
