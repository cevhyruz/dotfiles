#!/usr/bin/env bash
#
# Set up environment variables for:
# rust, android, distribution ruby, environment path, bash history,
# bash prompt, man page, less, shellcheck, fzf, xdg specifications.

function main() {
  if [[ -z "${ENVARS_INIT}" ]] || [[ -n "${TMUX}" ]]; then
    set_xdg_specs;
    set_editors;

    set_path;
    set_android_dev_path;
    set_ruby_distrib_path;

    set_hist_envars;
    set_prompts_envars;
    set_manpager;
    set_less_envars;
    set_shellcheck_envars;
    set_fzf_envars;
    set_rust_envars;

    cleanup && unset -f "${FUNCNAME[0]}";
    export ENVARS_INIT='TRUE'
  fi
}


function set_rust_envars() {
  lib::add_to_path "${HOME}/.cargo/bin";
}

function set_android_dev_path() {
  if [[ -d '/usr/lib/Android' ]] && [[ -z "${ANDROID_HOME}" ]]; then

    export readonly ANDROID_HOME='/usr/lib/Android';
    export readonly ANDROID_SDK_ROOT="${ANDROID_HOME}";
    export readonly GRADLE_HOME='/opt/gradle/gradle-5.6.2';

    declare -ra _ANDROID_PATH=(
      "${ANDROID_HOME}"
      "${ANDROID_HOME}/tools"
      "${ANDROID_HOME}/tools/bin"
      "${ANDROID_HOME}/platform-tools"
      "${ANDROID_SDK_ROOT}"
      "${GRADLE_HOME}" );

    for path in "${_ANDROID_PATH[@]}"; do
      if [[ -d "${path}" ]]; then
        lib::add_to_path "${path}";
      fi
    done

    unset path;
  fi
}

function set_ruby_distrib_path() {
  if [[ -d "${HOME}/.ruby" ]] && [[ -z "${GEM_HOME}" ]]; then
    readonly GEM_HOME="${HOME}/.ruby";
    lib::add_to_path "${GEM_HOME}/bin";
    export GEM_HOME;
  fi
}

function set_path() {
  declare -ar _ENV_PATH=(
    "${HOME}/.yarn/bin"
    "${HOME}/.symfony/bin"
    "/usr/local/go/bin"
    "$(command -v go &> /dev/null go env GOPATH)" );

  for path in "${_ENV_PATH[@]}"; do
    if [[ -d "${path}" ]]; then
      lib::add_to_path "${path}";
    fi
  done
  unset path;
}

function set_hist_envars() {
  readonly HISTSIZE=500;     # (default: 500)
  readonly HISTFILESIZE=500; # (default: 500)
  readonly HISTCONTROL='ignorespace:erasedups';
  readonly HISTIGNORE='bash:fish:zsh:dash:exit:logout:clear:pushd:popd:ls:echo';
}

function set_prompts_envars() {
  local -ra PS1_PROMPT=(
    "\\[${shade}\\]"
    "╭─["
    "\\[${white}\\]"
    "\\u@\\H"
    " \\j "
    "\\[${shade}\\]"
    "]"
    " "
    "\\[${bold}\\]"
    "\\[${cyan}\\]"
    "\$( __pwd \"\\W\" )"       # current working directory
    "\\[${reset}\\]"
    "\$( __repo \"::\" \" \" )"
    "\\[${pink}\\]"             # command color
    "\\n"                       # newline
    ""
    "\\[${shade}\\]╰─\\$"
    "\\[${pink}\\] "
  );

  PS1="\\n$(printf %s "${PS1_PROMPT[@]}")";
  PS2="\\[${pink}\\] $(trap __colorize_stdout DEBUG)";
  export PS1;
  export PS2;
}

function set_manpager() {
  command -v nvim &> /dev/null || {
    export LESS_TERMCAP_md="${yellow}"; # higlight section titles in manpages
    export MANPAGER='less -X'; # don't clear the screen after quitting a manpage
    return;
  }
  export MANWIDTH=96;
  # set neovim as manpager
  export MANPAGER="nvim -c ':set ft=man'";
  # [?] for faster manpager without plugins uncomment the line below.
  # export MANPAGER="nvim --noplugin -c ':set ft=man'";
}

function set_less_envars() {
  # @note: exporting LESS will pagerize some git commands and aliases,
  # set "core.pager" and/or "pager.<cmd/alias>" to false to avoid this.
  export LESS="--quiet --raw-control-chars --ignore-case";
}

function set_shellcheck_envars() {
  command -v shellcheck &> /dev/null || return;

  declare -ra SHELLCHECK_LOCAL_OPTS=(
    "--shell=bash"
    "--exclude=SC1090" # do not follow external sources
  );

  export SHELLCHECK_OPTS="${SHELLCHECK_LOCAL_OPTS[*]}";
}

function set_fzf_envars() {
  local fzf_command;
  local -ar FZF_BINDKEYS=(
    "ctrl-e:preview-down+preview-down," # preview scroll-down by 2 lines.
    "ctrl-y:preview-up+preview-up,"     # preview scroll-up by 2 lines.
    "ctrl-space:accept" );              # additional accept key.

  local -ar FZF_OPTS=(
    "--ansi"
    "--bind=$(printf "%s" "${FZF_BINDKEYS[@]}")"
    "--margin=0,0,1" # T,RL,B
    "--multi"
    "--height=25"
    "--no-bold"
    "--reverse"
    "--inline-info"
    "--header=" );

  local -ar FZF_IGNORE=(
    "node_modules/"
    "bower_components/"
    ".git/"
    "vendors/" );

  # [?] exlude directories (default: find)

  # Ag
  if command -v ag &> /dev/null; then
    for dir in "${FZF_IGNORE[@]}"; do
      ignored_dirs+="*${dir}*,";
    done

    fzf_command=(
      "ag --skip-vcs-ignores"
      "--hidden"
      "--ignore={${ignored_dirs}}"
      "-g ''"
    );

  # Rg
  elif command -v rg &> /dev/null; then

    for dir in "${FZF_IGNORE[@]}"; do
      ignored_dirs+="!${dir}*,";
    done

    fzf_command=(
      "rg --files"
      "--no-ignore"
      "--hidden"
      "--follow"
      "--glob={${ignored_dirs}}"
    );

  # find
  else
    for dir in "${FZF_IGNORE[@]}"; do
      ignored_dirs+=("! -path './${dir}*'");
    done

    fzf_command=(
      "find . -type f,l,s,p"
      "${ignored_dirs[*]}"
      "| sed 's/^..//'" );
  fi

  unset dir ignored_dirs

  export FZF_DEFAULT_COMMAND="${fzf_command[*]}"
  export FZF_DEFAULT_OPTS="${FZF_OPTS[*]}"
}

function cleanup() {
  unset -f set_path \
           set_android_dev_path \
           set_ruby_distrib_path;
  unset -f set_hist_envars \
           set_prompts_envars \
           set_manpager \
           set_less_envars \
           set_shellcheck_envars \
           set_fzf_envars;
  unset -f "${FUNCNAME[0]}";
}

function set_editors() {
  readonly VISUAL="$(command -v nvim || command -v vim || command -v )";
  # shellcheck disable=SC2034
  readonly EDITOR="$(command -v ed || echo "${VISUAL}")";
}

function set_xdg_specs() {
  # This is probably set already.
  declare -xr XDG_CONFIG_HOME="${HOME}/.config" && \
    export XDG_CONFIG_HOME;

  declare -xr XDG_DATA_HOME="${HOME}/.local/share" && \
    export XDG_DATA_HOME;
}

main "$@";
